import java.util.ArrayList;
import java.util.List;

interface EventListener {
    void handleEvent(String eventType, Object data);
}

class EventManager {
    private final List<EventListener> listeners = new ArrayList<>();

    public void subscribe(EventListener listener) {
        listeners.add(listener);
    }

    public void unsubscribe(EventListener listener) {
        listeners.remove(listener);
    }

    public void notify(String eventType, Object data) {
        for (EventListener listener : listeners) {
            listener.handleEvent(eventType, data);
        }
    }
}

class OrderProcessor implements EventListener {
    @Override
    public void handleEvent(String eventType, Object data) {
        if ("OrderPlaced".equals(eventType)) {
            System.out.println("Processing order: " + data);
        }
    }
}

class PaymentProcessor implements EventListener {
    @Override
    public void handleEvent(String eventType, Object data) {
        if ("PaymentReceived".equals(eventType)) {
            System.out.println("Processing payment: " + data);
        }
    }
}

public class EcommerceEventHandling {
    public static void main(String[] args) {
        EventManager eventManager = new EventManager();

        OrderProcessor orderProcessor = new OrderProcessor();
        PaymentProcessor paymentProcessor = new PaymentProcessor();

        eventManager.subscribe(orderProcessor);
        eventManager.subscribe(paymentProcessor);

        eventManager.notify("OrderPlaced", "Order #12345");
        eventManager.notify("PaymentReceived", "Payment for Order #12345");
    }
}

